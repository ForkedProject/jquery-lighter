// Generated by CoffeeScript 1.6.3
/*
jQuery Lightbox
Copyright 2013 Kevin Sylvestre
1.0.4
*/


(function() {
  "use strict";
  var $, Animation, Lightbox,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Animation = (function() {
    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "msTransition": "msTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function($el) {
      var el, result, type, _ref;
      el = $el[0];
      _ref = this.transitions;
      for (type in _ref) {
        result = _ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    Animation.execute = function($el, callback) {
      var transition;
      transition = this.transition($el);
      if (transition != null) {
        return $el.one(transition, callback);
      } else {
        return callback();
      }
    };

    return Animation;

  })();

  Lightbox = (function() {
    Lightbox.settings = {
      padding: 40,
      dimensions: {
        width: 960,
        height: 540
      }
    };

    Lightbox.lightbox = function($el, options) {
      if (options == null) {
        options = {};
      }
      return new Lightbox($el, options);
    };

    Lightbox.prototype.template = "<div class='lightbox fade'>\n  <div class='lightbox-container'>\n    <span class='lightbox-content'></span>\n    <a class='lightbox-close'>&times;</a>\n    <a class='lightbox-prev'>&lsaquo;</a>\n    <a class='lightbox-next'>&rsaquo;</a>\n  </div>\n  <div class='lightbox-overlay'></div>\n</div>";

    Lightbox.prototype.$ = function(selector) {
      return this.$lightbox.find(selector);
    };

    function Lightbox($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.clear = __bind(this.clear, this);
      this.setup = __bind(this.setup, this);
      this.keyup = __bind(this.keyup, this);
      this.align = __bind(this.align, this);
      this.resize = __bind(this.resize, this);
      this.process = __bind(this.process, this);
      this.href = __bind(this.href, this);
      this.type = __bind(this.type, this);
      this.image = __bind(this.image, this);
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      this.close = __bind(this.close, this);
      this.$ = __bind(this.$, this);
      this.$el = $el;
      this.settings = $.extend({}, Lightbox.settings, settings);
      this.$lightbox = $(this.template);
      this.$overlay = this.$(".lightbox-overlay");
      this.$content = this.$(".lightbox-content");
      this.$container = this.$(".lightbox-container");
      this.$close = this.$(".lightbox-close");
      this.$prev = this.$(".lightbox-prev");
      this.$next = this.$(".lightbox-next");
      this.$body = this.$(".lightbox-body");
      this.width = this.settings.dimensions.width;
      this.height = this.settings.dimensions.height;
      this.align();
      this.process();
    }

    Lightbox.prototype.close = function(event) {
      if (event != null) {
        event.preventDefault();
      }
      if (event != null) {
        event.stopPropagation();
      }
      return this.hide();
    };

    Lightbox.prototype.next = function(event) {
      if (event != null) {
        event.preventDefault();
      }
      return event != null ? event.stopPropagation() : void 0;
    };

    Lightbox.prototype.prev = function() {
      if (typeof event !== "undefined" && event !== null) {
        event.preventDefault();
      }
      return typeof event !== "undefined" && event !== null ? event.stopPropagation() : void 0;
    };

    Lightbox.prototype.image = function(href) {
      return href.match(/\.(jpeg|jpg|jpe|gif|png|bmp)$/i);
    };

    Lightbox.prototype.type = function(href) {
      if (href == null) {
        href = this.href();
      }
      return this.settings.type || (this.image(href) ? "image" : void 0);
    };

    Lightbox.prototype.href = function() {
      return this.$el.attr("href");
    };

    Lightbox.prototype.process = function() {
      var href, image, type,
        _this = this;
      type = this.type(href = this.href());
      this.$content.html((function() {
        switch (type) {
          case "image":
            return $("<img />").attr({
              src: href
            });
          default:
            return $(href);
        }
      })());
      switch (type) {
        case "image":
          image = new Image();
          image.src = href;
          return image.onload = function() {
            return _this.resize(image.width, image.height);
          };
      }
    };

    Lightbox.prototype.resize = function(width, height) {
      this.width = width;
      this.height = height;
      return this.align();
    };

    Lightbox.prototype.align = function() {
      var height, ratio, width;
      ratio = Math.max((height = this.height) / ($(window).height() - this.settings.padding), (width = this.width) / ($(window).width() - this.settings.padding));
      if (ratio > 1.0) {
        height = Math.round(height / ratio);
      }
      if (ratio > 1.0) {
        width = Math.round(width / ratio);
      }
      return this.$container.css({
        height: height,
        width: width,
        margin: "-" + (height / 2) + "px -" + (width / 2) + "px"
      });
    };

    Lightbox.prototype.keyup = function(event) {
      if (event.target.form != null) {
        return;
      }
      if (event.which === 27) {
        this.close();
      }
      if (event.which === 37) {
        this.prev();
      }
      if (event.which === 39) {
        return this.next();
      }
    };

    Lightbox.prototype.setup = function() {
      $(window).on("resize", this.align);
      $(document).on("keyup", this.keyup);
      this.$overlay.on("click", this.close);
      this.$close.on("click", this.close);
      this.$next.on("click", this.next);
      return this.$prev.on("click", this.prev);
    };

    Lightbox.prototype.clear = function() {
      $(window).off("resize", this.align);
      $(document).off("keyup", this.keyup);
      this.$overlay.off("click", this.close);
      this.$close.off("click", this.close);
      this.$next.off("click", this.next);
      return this.$prev.off("click", this.prev);
    };

    Lightbox.prototype.hide = function() {
      var alpha, omega,
        _this = this;
      alpha = this.clear;
      omega = function() {
        return _this.$lightbox.remove();
      };
      alpha();
      this.$lightbox.position();
      this.$lightbox.addClass('fade');
      return Animation.execute(this.$lightbox, omega);
    };

    Lightbox.prototype.show = function() {
      var alpha, omega,
        _this = this;
      omega = this.setup;
      alpha = function() {
        return $(document.body).append(_this.$lightbox);
      };
      alpha();
      this.$lightbox.position();
      this.$lightbox.removeClass('fade');
      return Animation.execute(this.$lightbox, omega);
    };

    return Lightbox;

  })();

  $.fn.extend({
    lightbox: function(option) {
      if (option == null) {
        option = {};
      }
      return this.each(function() {
        var $this, action, options;
        $this = $(this);
        options = $.extend({}, $.fn.lightbox.defaults, typeof option === "object" && option);
        action = typeof option === "string" ? option : option.action;
        if (action == null) {
          action = "show";
        }
        return Lightbox.lightbox($this, options)[action]();
      });
    }
  });

  $(document).on("click", "[data-lightbox]", function(event) {
    event.preventDefault();
    event.stopPropagation();
    return $(this).lightbox("show");
  });

}).call(this);
