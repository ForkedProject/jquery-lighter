// Generated by CoffeeScript 1.4.0

/*
jQuery Lightbox
Copyright 2013 Kevin Sylvestre
*/


(function() {
  "use strict";

  var $, Animation, Lightbox,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Animation = (function() {

    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "msTransition": "msTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function($el) {
      var el, result, type, _ref;
      el = $el[0];
      _ref = this.transitions;
      for (type in _ref) {
        result = _ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    Animation.execute = function($el, callback) {
      var transition;
      transition = this.transition($el);
      if (transition != null) {
        return $el.one(transition, callback);
      } else {
        return callback();
      }
    };

    return Animation;

  })();

  Lightbox = (function() {

    Lightbox.settings = {
      dimensions: {
        width: 960,
        height: 540
      }
    };

    Lightbox.lightbox = function($el, options) {
      if (options == null) {
        options = {};
      }
      return new Lightbox($el, options);
    };

    Lightbox.prototype.template = "<div class='lightbox fade'>\n  <div class='container'>\n    <span class='content'></span>\n    <a class='close'>&times;</a>\n    <a class='prev'>&lsaquo;</a>\n    <a class='next'>&rsaquo;</a>\n  </div>\n  <div class='overlay'></div>\n</div>";

    Lightbox.prototype.$ = function(selector) {
      return this.$lightbox.find(selector);
    };

    function Lightbox($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.show = __bind(this.show, this);

      this.hide = __bind(this.hide, this);

      this.align = __bind(this.align, this);

      this.clear = __bind(this.clear, this);

      this.setup = __bind(this.setup, this);

      this.resize = __bind(this.resize, this);

      this.process = __bind(this.process, this);

      this.href = __bind(this.href, this);

      this.type = __bind(this.type, this);

      this.image = __bind(this.image, this);

      this.prev = __bind(this.prev, this);

      this.next = __bind(this.next, this);

      this.close = __bind(this.close, this);

      this.$ = __bind(this.$, this);

      this.$el = $el;
      this.settings = $.extend({}, Lightbox.settings, settings);
      this.$lightbox = $(this.template);
      this.$overlay = this.$(".overlay");
      this.$content = this.$(".content");
      this.$container = this.$(".container");
      this.$close = this.$(".close");
      this.$prev = this.$(".prev");
      this.$next = this.$(".next");
      this.$body = this.$(".body");
      this.align();
      this.process();
    }

    Lightbox.prototype.close = function(event) {
      event.preventDefault();
      event.stopPropagation();
      return this.hide();
    };

    Lightbox.prototype.next = function() {};

    Lightbox.prototype.prev = function() {};

    Lightbox.prototype.image = function(href) {
      return href.match(/\.(jpeg|jpg|jpe|gif|png|bmp)$/i);
    };

    Lightbox.prototype.type = function(href) {
      if (href == null) {
        href = this.href();
      }
      return this.settings.type || (this.image(href) ? "image" : void 0);
    };

    Lightbox.prototype.href = function() {
      return this.$el.attr("href");
    };

    Lightbox.prototype.process = function() {
      var href, type;
      type = this.type(href = this.href());
      return this.$content.html((function() {
        switch (type) {
          case "image":
            return $("<img />").attr({
              src: href
            });
          default:
            return $(href);
        }
      })());
    };

    Lightbox.prototype.resize = function(width, height) {};

    Lightbox.prototype.setup = function() {
      this.$close.on("click", this.close);
      this.$overlay.on("click", this.close);
      this.$next.on("click", this.next);
      return this.$prev.on("click", this.prev);
    };

    Lightbox.prototype.clear = function() {
      this.$close.off("click", this.close);
      this.$overlay.off("click", this.close);
      this.$next.off("click", this.next);
      return this.$prev.off("click", this.prev);
    };

    Lightbox.prototype.align = function() {
      return this.$container.css({
        height: this.settings.dimensions.height,
        width: this.settings.dimensions.width,
        margin: "-" + (this.settings.dimensions.height / 2) + "px -" + (this.settings.dimensions.width / 2) + "px"
      });
    };

    Lightbox.prototype.hide = function() {
      var alpha, omega,
        _this = this;
      alpha = this.clear;
      omega = function() {
        return _this.$lightbox.remove();
      };
      alpha();
      this.$lightbox.position();
      this.$lightbox.addClass('fade');
      return Animation.execute(this.$lightbox, omega);
    };

    Lightbox.prototype.show = function() {
      var alpha, omega,
        _this = this;
      omega = this.setup;
      alpha = function() {
        return $(document.body).append(_this.$lightbox);
      };
      alpha();
      this.$lightbox.position();
      this.$lightbox.removeClass('fade');
      return Animation.execute(this.$lightbox, omega);
    };

    return Lightbox;

  })();

  $.fn.extend({
    lightbox: function(option) {
      if (option == null) {
        option = {};
      }
      return this.each(function() {
        var $this, action, options;
        $this = $(this);
        options = $.extend({}, $.fn.lightbox.defaults, typeof option === "object" && option);
        action = typeof option === "string" ? option : option.action;
        if (action == null) {
          action = "show";
        }
        return Lightbox.lightbox($this, options)[action]();
      });
    }
  });

  $(document).on("click", "[data-lightbox]", function(event) {
    event.preventDefault();
    event.stopPropagation();
    return $(this).lightbox("show");
  });

}).call(this);
