// Generated by CoffeeScript 1.4.0

/*
jQuery Lightbox
Copyright 2012 Kevin Sylvestre
*/


(function() {
  "use strict";

  var $, Animation, Lightbox,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Animation = (function() {

    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "msTransition": "msTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function($el) {
      var el, result, type, _ref;
      el = $el[0];
      _ref = this.transitions;
      for (type in _ref) {
        result = _ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    Animation.execute = function($el, callback) {
      var transition;
      transition = this.transition($el);
      if (transition != null) {
        return $el.one(transition, callback);
      } else {
        return callback();
      }
    };

    return Animation;

  })();

  Lightbox = (function() {

    Lightbox.settings = {
      dimensions: {
        width: 920,
        height: 540
      }
    };

    Lightbox.lightbox = function($el, options) {
      var data;
      if (options == null) {
        options = {};
      }
      data = $el.data("_lightbox") || new Lightbox($el, options);
      $el.data("_lightbox", data);
      return data;
    };

    Lightbox.prototype.template = "<div id='lightbox' class='lightbox'><div class='lightbox-overlay'></div><div class='lightbox-content'></div></div>";

    Lightbox.prototype.$ = function(selector) {
      var _ref;
      if ((_ref = this.$lightbox) == null) {
        this.$lightbox = $("#lightbox");
      }
      return this.$lightbox.find(selector);
    };

    function Lightbox($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.show = __bind(this.show, this);

      this.hide = __bind(this.hide, this);

      this.align = __bind(this.align, this);

      this.clear = __bind(this.clear, this);

      this.setup = __bind(this.setup, this);

      this.process = __bind(this.process, this);

      this.href = __bind(this.href, this);

      this.type = __bind(this.type, this);

      this.video = __bind(this.video, this);

      this.image = __bind(this.image, this);

      this.close = __bind(this.close, this);

      this.$el = $el;
      this.settings = $.extend({}, Lightbox.settings, settings);
      $("body:not(:has(#lightbox))").append(this.template);
      this.$overlay = this.$(".lightbox-overlay");
      this.$content = this.$(".lightbox-content");
      this.$close = $("<a class='lightbox-close'>&times;</a>");
      this.$prev = $("<a class='lightbox-prev'>&lsaquo;</a>");
      this.$next = $("<a class='lightbox-next'>&rsaquo;</a>");
      this.$body = $("<span class='lightbox-body'></span>");
      this.align();
      this.process();
    }

    Lightbox.prototype.close = function(event) {
      event.preventDefault();
      event.stopPropagation();
      return this.$hide();
    };

    Lightbox.prototype.image = function(href) {
      return href.match(/\.(jpeg|jpg|jpe|gif|png|bmp)$/i);
    };

    Lightbox.prototype.video = function(href) {
      return href.match(/\.(webm|mov|mp4|m4v|ogg|ogv)$/i);
    };

    Lightbox.prototype.type = function(href) {
      if (href == null) {
        href = this.href();
      }
      return this.settings.type || (this.image(href) ? "image" : void 0) || (this.video(href) ? "video" : void 0);
    };

    Lightbox.prototype.href = function() {
      return this.$el.attr("href");
    };

    Lightbox.prototype.process = function() {
      var href;
      this.$contents = (function() {
        switch (this.type(href = this.href())) {
          case "image":
            return $("<img />").attr({
              src: href
            });
          case "video":
            return $("<video />").attr({
              src: href
            });
          default:
            return $(href);
        }
      }).call(this);
      this.$contents.css(this.settings.dimensions);
      return this.$body.html(this.$contents);
    };

    Lightbox.prototype.setup = function() {
      this.$close.on('click', this.hide);
      this.$content.append(this.$close);
      this.$content.append(this.$next);
      this.$content.append(this.$prev);
      return this.$content.append(this.$body);
    };

    Lightbox.prototype.clear = function() {
      this.$close.off('click', this.hide);
      this.$close.detach();
      this.$next.detach();
      this.$prev.detach();
      return this.$body.detach();
    };

    Lightbox.prototype.align = function() {
      return this.$content.css({
        opacity: 0.0,
        top: this.$el.offset().top,
        left: this.$el.offset().left,
        right: this.$el.offset().right,
        bottom: this.$el.offset().bottom,
        height: this.$el.height(),
        width: this.$el.width()
      });
    };

    Lightbox.prototype.hide = function() {
      var alpha, omega,
        _this = this;
      this.$overlay.css({
        opacity: 0.8
      });
      this.$overlay.animate({
        opacity: 0.0
      });
      alpha = this.clear;
      omega = function() {
        return _this.$lightbox.hide();
      };
      alpha();
      return this.$content.animate({
        opacity: 0.0,
        top: this.$el.offset().top,
        left: this.$el.offset().left,
        right: this.$el.offset().right,
        bottom: this.$el.offset().bottom,
        height: this.$el.height(),
        width: this.$el.width()
      }, this.settings.duration, this.settings.easing, omega);
    };

    Lightbox.prototype.show = function() {
      var alpha, omega,
        _this = this;
      this.$overlay.css({
        opacity: 0.0
      });
      this.$overlay.animate({
        opacity: 0.4
      });
      alpha = function() {
        return _this.$lightbox.show();
      };
      omega = this.setup;
      alpha();
      return this.$content.animate({
        opacity: 1.0,
        top: Math.round(($(window).height() - this.settings.dimensions.height) / 2),
        left: Math.round(($(window).width() - this.settings.dimensions.width) / 2),
        bottom: Math.round(($(window).height() + this.settings.dimensions.height) / 2),
        right: Math.round(($(window).width() + this.settings.dimensions.width) / 2),
        height: this.settings.dimensions.height,
        width: this.settings.dimensions.width
      }, this.settings.duration, this.settings.easing, omega);
    };

    return Lightbox;

  })();

  $.fn.extend({
    lightbox: function(option) {
      if (option == null) {
        option = {};
      }
      return this.each(function() {
        var $this, action, options;
        $this = $(this);
        options = $.extend({}, $.fn.lightbox.defaults, typeof option === "object" && option);
        action = typeof option === "string" ? option : option.action;
        if (action == null) {
          action = "show";
        }
        return Lightbox.lightbox($this, options)[action]();
      });
    }
  });

  $(document).on("click", "[data-lightbox]", function(event) {
    event.preventDefault();
    event.stopPropagation();
    return $(this).lightbox('show');
  });

}).call(this);
